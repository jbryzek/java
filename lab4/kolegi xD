import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.*;
import java.text.MessageFormat;

import org.mariuszgromada.math.mxparser.*;

class MathFunction {

    private String humanReadableName;
    private String functionName;
    private int cursorPos;

    MathFunction(String humanReadableName, String functionName, int cursorPos){
        this.humanReadableName = humanReadableName;
        this.functionName = functionName;
        this.cursorPos = cursorPos;
    }

    @Override
    public String toString() {
        return humanReadableName;
    }

    String getFunctionName() {
        return functionName;
    }

    int getCursorPos() {
        return cursorPos;
    }
}

public class Calculator extends JFrame{
    private JButton evaluateButton;
    private JList<MathFunction> list1;
    private JTextField textField1;
    private JTextArea textArea1;
    private JPanel mainPanel;


    private String lastCommand = "";
    private String lastResult = "";

    private void handleExpression(String handleExpression){

        //useful stuff, linux and windows clear screen
        if(handleExpression.equalsIgnoreCase("cls") || handleExpression.equalsIgnoreCase("clear")){
            textArea1.setText("");
            textField1.setText("");
            return;
        }


        if(handleExpression.length() == 0){
            return;
        }

        lastCommand = handleExpression;
        textField1.setText("");

        //execute
        Expression newExpr = new Expression(handleExpression);
        double calculatedVal;
        if(newExpr.checkSyntax()){
            calculatedVal = newExpr.calculate();

            if(Double.isNaN(calculatedVal)){
                JOptionPane.showMessageDialog(null, "Result is not a number!", "Calculation error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            lastResult = Double.toString(calculatedVal);
        } else {
            JOptionPane.showMessageDialog(null, "Incorrect syntax!. More details: " +  newExpr.getErrorMessage(), "Calculation error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String result = MessageFormat.format(handleExpression + "\n{0,number}\n-----------------\n", calculatedVal);
        textArea1.append(result);
    }


    Calculator() {
        setTitle("Calculator");
        setSize(640, 480);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(640, 480));

        Font f = new Font("SansSerif", Font.PLAIN, 10);
        UIManager.put("MenuFont", f);

        //Adding main panel
        add(mainPanel);

        //Adding menu bar
        JMenuBar menubar = new JMenuBar();
        setJMenuBar(menubar);

        JMenu options = new JMenu("Options");
        menubar.add(options);

        JMenuItem exit = new JMenuItem("Exit");
        JMenuItem reset = new JMenuItem("Reset");
        options.add(reset);
        options.add(exit);

        menubar.setBackground(new Color(0xe3, 0x00, 0x8c)); //e3008c
        options.setForeground(new Color(0xff, 0xff, 0xff));


        //create the model and add elements
        DefaultListModel<MathFunction> listModel = new DefaultListModel<>();
        listModel.addElement(new MathFunction("Sin(x)", "sin()", 4));
        listModel.addElement(new MathFunction("Cos(x)", "cos()",4));
        listModel.addElement(new MathFunction("Arcsin(x)", "arcsin()",7));
        listModel.addElement(new MathFunction("Arccos(x)", "arccos()",7));
        listModel.addElement(new MathFunction("ArcSinH(x)", "arcsinh()",8));
        listModel.addElement(new MathFunction("φ [Phi]", "*[phi]",0));
        listModel.addElement(new MathFunction("π [Pi]", "*pi",0));
        listModel.addElement(new MathFunction("ρ [Plastic constant]", "*[PN]",0));
        listModel.addElement(new MathFunction("+ [addition]", " + ",0));
        listModel.addElement(new MathFunction("* [Multiplication]", " * ",0));
        listModel.addElement(new MathFunction("/ [Division]", " / ",0));
        listModel.addElement(new MathFunction("Last result", "lastresult",0));

        //create the list
        list1.setModel(listModel);
        list1.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));

        //exit in menu bar
        exit.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        //Reset in menu bar
        reset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    textArea1.setText("");
                    textField1.setText("");
            }
        });


        list1.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {

                String a = list1.getSelectedValue().getFunctionName();
                if(!a.equals("lastresult")){
                    textField1.setText(a);
                    textField1.grabFocus();
                    textField1.setCaretPosition(list1.getSelectedValue().getCursorPos());
                } else {
                    textField1.setText(lastResult);
                }

                list1.setSelectionBackground(new Color(0xe3, 0x00, 0x8c));
                list1.setSelectionForeground(new Color(0xff, 0xff, 0xff));
            }
        });


        textField1.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e);

                //arrow up
                if(e.getKeyCode() == 38){
                    textField1.setText(lastCommand);
                }

                //enter
                if(e.getKeyCode() == 10){
                    handleExpression(textField1.getText());
                }
            }
        });

        evaluateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                handleExpression(textField1.getText());
            }
        });

    }


}
